import express from 'express';
import * as dotenv from 'dotenv';
import { Configuration, OpenAIApi } from 'openai';

dotenv.config();

const router = express.Router();

// Initialize OpenAI API configuration
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Health check endpoint
router.route('/').get((req, res) => {
  res.status(200).json({ message: "Hello from DALL.E ROUTES" });
});

// POST endpoint for generating images
router.route('/').post(async (req, res) => {
  try {
    const { prompt } = req.body;

    // Debug: Log the incoming request body
    console.log("Received POST request with body:", req.body);

    // Validate input
    if (!prompt) {
      console.warn("Validation Error: Missing prompt in request body");
      return res.status(400).json({ error: "Prompt is required" });
    }

    // Debug: Log the prompt being sent to OpenAI
    console.log("Sending prompt to OpenAI API:", prompt);

    // Call OpenAI API to generate image
    const response = await openai.createImage({
      prompt,
      n: 1, // Number of images to generate
      size: '1024x1024', // Image dimensions
      response_format: 'b64_json', // Base64 encoded format
    });

    // Debug: Log the raw response from OpenAI
    console.log("OpenAI API Raw Response:", response.data);

    // Extract the generated image
    const image = response?.data?.data?.[0]?.b64_json;

    if (!image) {
      console.error("OpenAI Error: No image found in API response");
      throw new Error("No image was returned from OpenAI");
    }

    // Debug: Log the successful image generation
    console.log("Image successfully generated by OpenAI");

    // Send the image back to the client
    res.status(200).json({ photo: image });
  } catch (error) {
    console.error("Error in DALL.E route:", error.message);

    if (error.response) {
      // Log OpenAI API error details if available
      console.error("OpenAI API Error Details:", error.response.data);
    }

    // Return an appropriate error message
    res.status(500).json({
      error: error.message || "Something went wrong. Please try again.",
    });
  }
});

export default router;
